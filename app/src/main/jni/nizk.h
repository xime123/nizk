#ifndef __HEADER_NIZK_H__
#define __HEADER_NIZK_H__

#define MR_PAIRING_BN
#define AES_SECURITY 128


#include <iostream>
#include <ctime>
#include <fstream>
#include "pairing_3.h"
#include "typedef.h"

#define E_ERROR 0
#define R_ERROR  -1
#define A_ERROR -2
#define SUCCESSFULL 1

extern PFC pfc;

static BYTE PPByte[] = {
		//g_1
		0x20,0x9F,0x3C,0x22,0xCA,0xFD,0x79,0x37,0xAA,0x77,0x2F,0x21,0x09,0x8A,0x20,0x0B,
		0x38,0x95,0xD0,0x30,0x67,0x65,0xA4,0xD8,0x40,0x06,0xE2,0x5B,0x78,0x47,0xA0,0x60,
		0x21,0x22,0x23,0x79,0x36,0xA1,0xCF,0x11,0x06,0x1B,0xE2,0xDE,0xA2,0x93,0xC3,0x88,
		0x15,0xE5,0xC5,0x09,0x55,0x5A,0x58,0x27,0xAF,0xF8,0x91,0x16,0xDD,0xC4,0x0B,0x9C,
		//g_2
		0x24,0xD3,0xF4,0xEC,0x41,0xAB,0xA7,0xDF,0x8D,0x65,0x97,0x77,0xF0,0xFB,0x10,0x71,
		0x85,0xBB,0x90,0x2A,0x46,0xE1,0x16,0x7F,0xD3,0xAE,0x66,0x25,0x6C,0x4C,0x7F,0xCE,
		0x20,0x65,0x5A,0x91,0x34,0x49,0xC3,0xE7,0x0F,0x2B,0xA2,0x89,0xDD,0x6D,0x19,0x17,
		0x37,0x44,0x6C,0x9A,0xC6,0x07,0x4D,0xE8,0x21,0xCA,0x51,0xAD,0x1C,0x2C,0xE4,0x3F,
		0x15,0x1A,0x96,0xC4,0x7C,0x2E,0x8A,0x2A,0x00,0xBA,0x06,0x79,0x27,0xD7,0x98,0x14,
		0x7F,0xA0,0x57,0xE9,0xD8,0x9E,0x36,0x81,0x2F,0x06,0x08,0x67,0xB5,0x95,0x3B,0xDF,
		0x13,0xDC,0x0E,0x1B,0xD1,0x55,0x6F,0x3D,0x9B,0x39,0x54,0xDB,0x63,0xCE,0xCF,0x25,
		0x08,0xF9,0x60,0x37,0x30,0xE7,0x6B,0xE5,0x02,0x8F,0x2A,0xD8,0x27,0x55,0xDE,0xEB,
		//g_t
		0x13,0x52,0x82,0x96,0x2A,0x84,0x3B,0x88,0x9E,0x98,0x56,0xC8,0x71,0x89,0xB9,0x7E,
		0x56,0x89,0x56,0x74,0xEE,0x0C,0x40,0x16,0x79,0x79,0x7A,0x49,0xA4,0x3F,0x8A,0x42,
		0x1E,0x2D,0xC1,0xF4,0x77,0xCE,0x11,0x2E,0xD9,0x69,0xE6,0x58,0x3B,0xA1,0xF7,0xE1,
		0x0A,0x00,0x7F,0x18,0xEE,0x0B,0xFC,0x8F,0x8B,0xCA,0xF4,0xB4,0x0D,0x6F,0x45,0xE6,
		0x19,0x24,0x7F,0x93,0x24,0xE9,0x08,0x34,0x24,0xC6,0xE8,0x69,0xE2,0x84,0xA6,0xEF,
		0x2A,0xC7,0x3F,0xF7,0x48,0xD6,0x0D,0x82,0xA1,0x6C,0x18,0x2D,0xCD,0x3F,0xEC,0x93,
		0x0F,0x20,0x3B,0x6B,0x04,0xE0,0x9E,0xC6,0xE6,0xF6,0xD0,0x66,0xE1,0x21,0xE5,0x22,
		0xCB,0x0A,0xB0,0xE5,0xD8,0x9F,0xC0,0x97,0x40,0x66,0x9D,0xAF,0x88,0xC2,0xED,0x43,
		0x10,0x74,0x59,0x97,0xE7,0x39,0xFD,0x73,0x4F,0x6F,0xD4,0xE6,0xC3,0xCB,0x80,0x76,
		0xE4,0xDD,0x07,0x43,0x6F,0xF6,0xDC,0xC7,0x39,0x86,0xCE,0x01,0x06,0x53,0x09,0x77,
		0x06,0x4E,0x52,0x8F,0xF5,0x6E,0xCC,0x5F,0x74,0x77,0x7B,0xBF,0x63,0xA7,0xD1,0x3F,
		0x5A,0x58,0x4E,0x1A,0x5D,0x47,0xD1,0x2C,0xA7,0xBF,0x5C,0x0E,0xAA,0x45,0x42,0x41,
		0x17,0xAB,0xC8,0x59,0x1B,0xC2,0x44,0x47,0x42,0xD6,0x10,0x85,0x9E,0x9D,0xB3,0x70,
		0xD9,0xCC,0xF8,0xFD,0x96,0xFF,0xC1,0xB1,0x60,0x6E,0xB9,0x7F,0xD2,0x7E,0xB8,0x52,
		0x06,0x1F,0x1B,0x4F,0xF9,0xDE,0xA0,0x50,0x57,0x34,0xF1,0xB9,0x3E,0xE1,0x16,0x85,
		0xAC,0x03,0x01,0x67,0xD5,0x62,0xA2,0xC8,0xBC,0xC6,0x74,0x4E,0x4F,0xD1,0x36,0xAE,
		0x0E,0xA7,0x86,0xE9,0x90,0xAA,0x5E,0x2D,0xA7,0x4B,0xC2,0x42,0xDF,0xBA,0x80,0x15,
		0x22,0x95,0x51,0xF8,0x3B,0xF8,0x7F,0xC1,0x86,0xBE,0x8D,0x70,0xA6,0xA9,0x21,0xCF,
		0x11,0x55,0x28,0xF4,0xFD,0xB2,0x06,0x7E,0x04,0xDC,0x6B,0x31,0x81,0x0F,0xEB,0x69,
		0x89,0x76,0x80,0x22,0x30,0xD8,0x5D,0x7E,0x19,0x5D,0xF0,0x3F,0x7C,0xD2,0x19,0x7A,
		0x16,0x98,0xFE,0x1A,0xA0,0xC7,0x69,0x61,0x8C,0x40,0xDC,0x4D,0xB7,0xB7,0xF0,0x0F,
		0xED,0xAF,0xC4,0x34,0xFB,0x4D,0x49,0xD5,0xC5,0x2A,0xCF,0xA7,0xE5,0x76,0xF5,0x38,
		0x08,0x9C,0x52,0x8C,0x88,0xD9,0x3F,0x57,0x74,0x9B,0x17,0xED,0x2C,0x2B,0xC5,0x7D,
		0xCA,0x3C,0xA6,0x43,0xC5,0xB2,0xF5,0x35,0xAE,0x5F,0x1F,0x4C,0x39,0x4A,0x85,0x90,
		//h
		0x13,0xA3,0x7B,0x19,0x3C,0x2B,0xDC,0x36,0x36,0x3A,0x47,0x13,0xEE,0x32,0x26,0x84,
		0x1B,0xCA,0x63,0xD7,0x23,0xB7,0x29,0x2A,0xBA,0x6C,0x7B,0xA1,0xF8,0xA1,0x44,0x0A,
		0x02,0xE9,0x3E,0x09,0x1A,0xD1,0x22,0xC4,0x31,0x22,0x27,0x55,0x9D,0x08,0x77,0xC1,
		0x93,0xB7,0xAE,0x9F,0xBF,0x58,0x46,0x3D,0x67,0xFB,0xF2,0x8C,0xFE,0x2A,0xC3,0x74,
};

void NIZK_Setup(BYTE* pbNIZKPP, int* piNIZKPPLen, BYTE* pbPriKey, int iPriKeyLen);
void NIZK_KeyGen(BYTE* pbPubKey, int* piPubKeyLen, BYTE* pbPriKey, int iPriKeyLen);

void NIZK_Encryption(BYTE* pbCiphertext, int* piCiphertextLen, BYTE* pbPubKey, int iPubKeyLen, BYTE* pbMessage, int iMessageLen, BYTE* pbRandom, int iRandomLen);
void NIZK_Decryption(BYTE* pbMessage, int* piMessageLen, BYTE* pbCiphertext, int iCiphertextLen, BYTE* pbPriKey, int iPriKeyLen, char* pcfilename, int iRandge);

void NIZK_APubCipherAdd(BYTE* pbResult, int* piResultLen, BYTE* pbAPubCipher1, BYTE* pbAPubCipher2, int iAPubCipherLen);
void NIZK_APubCipherSub(BYTE* pbResult, int* piResultLen, BYTE* pbAPubCipher1, BYTE* pbAPubCipher2, int iAPubCipherLen);

void NIZK_GenProof(BYTE* pbPai, int* piPaiLen, BYTE* pbTraAPubCipher, int* piTraAPubcipherLen, BYTE* pbTraBPubCipher, int* piTraBPubCipherLen, BYTE* pbBalAPubCipher, int iBalAPubCipherLen, BYTE* pbAPubKey, BYTE* pbBPubKey, int iPubKeyLen, BYTE* pbAPriKey, int iAPriKeyLen, BYTE* pbRandom, int iRandomLen, BYTE* pbBalance, int iBalanceLen, BYTE* pbTrade, int iTradeLen, BYTE* pbNIZKPP, int iNIZKPPLen);
int NIZK_VerifyProof(BYTE* pbPai, int iPaiLen, BYTE* pbBalAPubCipher, BYTE* pbTraAPubCipher, BYTE* pbTraBPubCipher, int iPubCipherLen, BYTE* pbAPubKey, BYTE* pbBPubKey, int iPubKeyLen, BYTE* pbRandom, int iRandomLen, BYTE* pbNIZKPP, int iNIZKPPLen);


/***********辅助函数***********************/
void NIZK_Base_Transfer(int& c0, int& c1, int& c2, int value);
int ByteToInt(BYTE* src, int offset);
void IntToByte(BYTE* des, int source);
/***************大步小步算法****************************/

int NIZK_TableSearch(NIZK_List* listtable, int length, G1 dest);
int NIZK_GetMessage(NIZK_List* listtable, int pos, int length, G1 beta);
int NIZK_ReadList(NIZK_List* listtable, int length, int pos, char* filename);

void NIZK_GenTable(NIZK_List* listtable, int begin, int length);//
void NIZK_SortTable(NIZK_List* listtable, int length);//排序
void NIZK_SaveList(NIZK_List* listtable, int length, char* filename);

void NIZK_Print(NIZK_List* listtable, int length);

#endif